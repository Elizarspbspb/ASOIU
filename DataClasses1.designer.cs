#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASOIU_Test1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ASOIU_4lr_1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertАпартаменты(Апартаменты instance);
    partial void UpdateАпартаменты(Апартаменты instance);
    partial void DeleteАпартаменты(Апартаменты instance);
    partial void InsertЗастройщик(Застройщик instance);
    partial void UpdateЗастройщик(Застройщик instance);
    partial void DeleteЗастройщик(Застройщик instance);
    partial void InsertКорзина(Корзина instance);
    partial void UpdateКорзина(Корзина instance);
    partial void DeleteКорзина(Корзина instance);
    partial void InsertСделка(Сделка instance);
    partial void UpdateСделка(Сделка instance);
    partial void DeleteСделка(Сделка instance);
    partial void InsertТип_апартаментов(Тип_апартаментов instance);
    partial void UpdateТип_апартаментов(Тип_апартаментов instance);
    partial void DeleteТип_апартаментов(Тип_апартаментов instance);
    partial void InsertПокупатель(Покупатель instance);
    partial void UpdateПокупатель(Покупатель instance);
    partial void DeleteПокупатель(Покупатель instance);
    partial void InsertСотрудники(Сотрудники instance);
    partial void UpdateСотрудники(Сотрудники instance);
    partial void DeleteСотрудники(Сотрудники instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASOIU_4lr_1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Апартаменты> Апартаменты
		{
			get
			{
				return this.GetTable<Апартаменты>();
			}
		}
		
		public System.Data.Linq.Table<Застройщик> Застройщик
		{
			get
			{
				return this.GetTable<Застройщик>();
			}
		}
		
		public System.Data.Linq.Table<Корзина> Корзина
		{
			get
			{
				return this.GetTable<Корзина>();
			}
		}
		
		public System.Data.Linq.Table<Сделка> Сделка
		{
			get
			{
				return this.GetTable<Сделка>();
			}
		}
		
		public System.Data.Linq.Table<Тип_апартаментов> Тип_апартаментов
		{
			get
			{
				return this.GetTable<Тип_апартаментов>();
			}
		}
		
		public System.Data.Linq.Table<Покупатель> Покупатель
		{
			get
			{
				return this.GetTable<Покупатель>();
			}
		}
		
		public System.Data.Linq.Table<Сотрудники> Сотрудники
		{
			get
			{
				return this.GetTable<Сотрудники>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Апартаменты")]
	public partial class Апартаменты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<decimal> _Цена;
		
		private System.Nullable<int> _Площадь;
		
		private System.Nullable<int> _Этаж;
		
		private string _Адрес;
		
		private System.Data.Linq.Binary _Картинки;
		
		private System.Nullable<int> _Застройщик;
		
		private System.Nullable<int> _Тип_апартаментов;
		
		private EntitySet<Корзина> _Корзина;
		
		private EntitySet<Сделка> _Сделка;
		
		private EntityRef<Застройщик> _Застройщик1;
		
		private EntityRef<Тип_апартаментов> _Тип_апартаментов1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnЦенаChanging(System.Nullable<decimal> value);
    partial void OnЦенаChanged();
    partial void OnПлощадьChanging(System.Nullable<int> value);
    partial void OnПлощадьChanged();
    partial void OnЭтажChanging(System.Nullable<int> value);
    partial void OnЭтажChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    partial void OnКартинкиChanging(System.Data.Linq.Binary value);
    partial void OnКартинкиChanged();
    partial void OnЗастройщикChanging(System.Nullable<int> value);
    partial void OnЗастройщикChanged();
    partial void OnТип_апартаментовChanging(System.Nullable<int> value);
    partial void OnТип_апартаментовChanged();
    #endregion
		
		public Апартаменты()
		{
			this._Корзина = new EntitySet<Корзина>(new Action<Корзина>(this.attach_Корзина), new Action<Корзина>(this.detach_Корзина));
			this._Сделка = new EntitySet<Сделка>(new Action<Сделка>(this.attach_Сделка), new Action<Сделка>(this.detach_Сделка));
			this._Застройщик1 = default(EntityRef<Застройщик>);
			this._Тип_апартаментов1 = default(EntityRef<Тип_апартаментов>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена", DbType="Money")]
		public System.Nullable<decimal> Цена
		{
			get
			{
				return this._Цена;
			}
			set
			{
				if ((this._Цена != value))
				{
					this.OnЦенаChanging(value);
					this.SendPropertyChanging();
					this._Цена = value;
					this.SendPropertyChanged("Цена");
					this.OnЦенаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Площадь", DbType="Int")]
		public System.Nullable<int> Площадь
		{
			get
			{
				return this._Площадь;
			}
			set
			{
				if ((this._Площадь != value))
				{
					this.OnПлощадьChanging(value);
					this.SendPropertyChanging();
					this._Площадь = value;
					this.SendPropertyChanged("Площадь");
					this.OnПлощадьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Этаж", DbType="Int")]
		public System.Nullable<int> Этаж
		{
			get
			{
				return this._Этаж;
			}
			set
			{
				if ((this._Этаж != value))
				{
					this.OnЭтажChanging(value);
					this.SendPropertyChanging();
					this._Этаж = value;
					this.SendPropertyChanged("Этаж");
					this.OnЭтажChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Адрес", DbType="NVarChar(MAX)")]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Картинки", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Картинки
		{
			get
			{
				return this._Картинки;
			}
			set
			{
				if ((this._Картинки != value))
				{
					this.OnКартинкиChanging(value);
					this.SendPropertyChanging();
					this._Картинки = value;
					this.SendPropertyChanged("Картинки");
					this.OnКартинкиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Застройщик", DbType="Int")]
		public System.Nullable<int> Застройщик
		{
			get
			{
				return this._Застройщик;
			}
			set
			{
				if ((this._Застройщик != value))
				{
					if (this._Застройщик1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnЗастройщикChanging(value);
					this.SendPropertyChanging();
					this._Застройщик = value;
					this.SendPropertyChanged("Застройщик");
					this.OnЗастройщикChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Тип апартаментов]", Storage="_Тип_апартаментов", DbType="Int")]
		public System.Nullable<int> Тип_апартаментов
		{
			get
			{
				return this._Тип_апартаментов;
			}
			set
			{
				if ((this._Тип_апартаментов != value))
				{
					this.OnТип_апартаментовChanging(value);
					this.SendPropertyChanging();
					this._Тип_апартаментов = value;
					this.SendPropertyChanged("Тип_апартаментов");
					this.OnТип_апартаментовChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Апартаменты_Корзина", Storage="_Корзина", ThisKey="ID", OtherKey="Код_апартаментов")]
		public EntitySet<Корзина> Корзина
		{
			get
			{
				return this._Корзина;
			}
			set
			{
				this._Корзина.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Апартаменты_Сделка", Storage="_Сделка", ThisKey="ID", OtherKey="Номер_апартаментов")]
		public EntitySet<Сделка> Сделка
		{
			get
			{
				return this._Сделка;
			}
			set
			{
				this._Сделка.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Застройщик_Апартаменты", Storage="_Застройщик1", ThisKey="Застройщик", OtherKey="ID", IsForeignKey=true)]
		public Застройщик Застройщик1
		{
			get
			{
				return this._Застройщик1.Entity;
			}
			set
			{
				Застройщик previousValue = this._Застройщик1.Entity;
				if (((previousValue != value) 
							|| (this._Застройщик1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Застройщик1.Entity = null;
						previousValue.Апартаменты.Remove(this);
					}
					this._Застройщик1.Entity = value;
					if ((value != null))
					{
						value.Апартаменты.Add(this);
						this._Застройщик = value.ID;
					}
					else
					{
						this._Застройщик = default(Nullable<int>);
					}
					this.SendPropertyChanged("Застройщик1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_апартаментов_Апартаменты", Storage="_Тип_апартаментов1", ThisKey="Тип_апартаментов", OtherKey="ID", IsForeignKey=true)]
		public Тип_апартаментов Тип_апартаментов1
		{
			get
			{
				return this._Тип_апартаментов1.Entity;
			}
			set
			{
				Тип_апартаментов previousValue = this._Тип_апартаментов1.Entity;
				if (((previousValue != value) 
							|| (this._Тип_апартаментов1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_апартаментов1.Entity = null;
						previousValue.Апартаменты.Remove(this);
					}
					this._Тип_апартаментов1.Entity = value;
					if ((value != null))
					{
						value.Апартаменты.Add(this);
						this._Тип_апартаментов = value.ID;
					}
					else
					{
						this._Тип_апартаментов = default(Nullable<int>);
					}
					this.SendPropertyChanged("Тип_апартаментов1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Корзина(Корзина entity)
		{
			this.SendPropertyChanging();
			entity.Апартаменты = this;
		}
		
		private void detach_Корзина(Корзина entity)
		{
			this.SendPropertyChanging();
			entity.Апартаменты = null;
		}
		
		private void attach_Сделка(Сделка entity)
		{
			this.SendPropertyChanging();
			entity.Апартаменты = this;
		}
		
		private void detach_Сделка(Сделка entity)
		{
			this.SendPropertyChanging();
			entity.Апартаменты = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Застройщик")]
	public partial class Застройщик : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Название;
		
		private string _Описание;
		
		private System.Nullable<System.DateTime> _Дата_создания;
		
		private System.Data.Linq.Binary _Логотип;
		
		private EntitySet<Апартаменты> _Апартаменты;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    partial void OnДата_созданияChanging(System.Nullable<System.DateTime> value);
    partial void OnДата_созданияChanged();
    partial void OnЛоготипChanging(System.Data.Linq.Binary value);
    partial void OnЛоготипChanged();
    #endregion
		
		public Застройщик()
		{
			this._Апартаменты = new EntitySet<Апартаменты>(new Action<Апартаменты>(this.attach_Апартаменты), new Action<Апартаменты>(this.detach_Апартаменты));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(255)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(MAX)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Дата создания]", Storage="_Дата_создания", DbType="DateTime")]
		public System.Nullable<System.DateTime> Дата_создания
		{
			get
			{
				return this._Дата_создания;
			}
			set
			{
				if ((this._Дата_создания != value))
				{
					this.OnДата_созданияChanging(value);
					this.SendPropertyChanging();
					this._Дата_создания = value;
					this.SendPropertyChanged("Дата_создания");
					this.OnДата_созданияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Логотип", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Логотип
		{
			get
			{
				return this._Логотип;
			}
			set
			{
				if ((this._Логотип != value))
				{
					this.OnЛоготипChanging(value);
					this.SendPropertyChanging();
					this._Логотип = value;
					this.SendPropertyChanged("Логотип");
					this.OnЛоготипChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Застройщик_Апартаменты", Storage="_Апартаменты", ThisKey="ID", OtherKey="Застройщик")]
		public EntitySet<Апартаменты> Апартаменты
		{
			get
			{
				return this._Апартаменты;
			}
			set
			{
				this._Апартаменты.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Апартаменты(Апартаменты entity)
		{
			this.SendPropertyChanging();
			entity.Застройщик1 = this;
		}
		
		private void detach_Апартаменты(Апартаменты entity)
		{
			this.SendPropertyChanging();
			entity.Застройщик1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Корзина")]
	public partial class Корзина : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Код_апартаментов;
		
		private System.Nullable<int> _Код_покупателя;
		
		private EntityRef<Апартаменты> _Апартаменты;
		
		private EntityRef<Покупатель> _Покупатель;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnКод_апартаментовChanging(System.Nullable<int> value);
    partial void OnКод_апартаментовChanged();
    partial void OnКод_покупателяChanging(System.Nullable<int> value);
    partial void OnКод_покупателяChanged();
    #endregion
		
		public Корзина()
		{
			this._Апартаменты = default(EntityRef<Апартаменты>);
			this._Покупатель = default(EntityRef<Покупатель>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код апартаментов]", Storage="_Код_апартаментов", DbType="Int")]
		public System.Nullable<int> Код_апартаментов
		{
			get
			{
				return this._Код_апартаментов;
			}
			set
			{
				if ((this._Код_апартаментов != value))
				{
					this.OnКод_апартаментовChanging(value);
					this.SendPropertyChanging();
					this._Код_апартаментов = value;
					this.SendPropertyChanged("Код_апартаментов");
					this.OnКод_апартаментовChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код покупателя]", Storage="_Код_покупателя", DbType="Int")]
		public System.Nullable<int> Код_покупателя
		{
			get
			{
				return this._Код_покупателя;
			}
			set
			{
				if ((this._Код_покупателя != value))
				{
					this.OnКод_покупателяChanging(value);
					this.SendPropertyChanging();
					this._Код_покупателя = value;
					this.SendPropertyChanged("Код_покупателя");
					this.OnКод_покупателяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Апартаменты_Корзина", Storage="_Апартаменты", ThisKey="Код_апартаментов", OtherKey="ID", IsForeignKey=true)]
		public Апартаменты Апартаменты
		{
			get
			{
				return this._Апартаменты.Entity;
			}
			set
			{
				Апартаменты previousValue = this._Апартаменты.Entity;
				if (((previousValue != value) 
							|| (this._Апартаменты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Апартаменты.Entity = null;
						previousValue.Корзина.Remove(this);
					}
					this._Апартаменты.Entity = value;
					if ((value != null))
					{
						value.Корзина.Add(this);
						this._Код_апартаментов = value.ID;
					}
					else
					{
						this._Код_апартаментов = default(Nullable<int>);
					}
					this.SendPropertyChanged("Апартаменты");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Покупатель_Корзина", Storage="_Покупатель", ThisKey="Код_покупателя", OtherKey="ID", IsForeignKey=true)]
		public Покупатель Покупатель
		{
			get
			{
				return this._Покупатель.Entity;
			}
			set
			{
				Покупатель previousValue = this._Покупатель.Entity;
				if (((previousValue != value) 
							|| (this._Покупатель.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Покупатель.Entity = null;
						previousValue.Корзина.Remove(this);
					}
					this._Покупатель.Entity = value;
					if ((value != null))
					{
						value.Корзина.Add(this);
						this._Код_покупателя = value.ID;
					}
					else
					{
						this._Код_покупателя = default(Nullable<int>);
					}
					this.SendPropertyChanged("Покупатель");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Сделка")]
	public partial class Сделка : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Номер_покупателя;
		
		private System.Nullable<int> _Номер_апартаментов;
		
		private System.Nullable<int> _Номер_сотрудника;
		
		private EntityRef<Апартаменты> _Апартаменты;
		
		private EntityRef<Покупатель> _Покупатель;
		
		private EntityRef<Сотрудники> _Сотрудники;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnНомер_покупателяChanging(System.Nullable<int> value);
    partial void OnНомер_покупателяChanged();
    partial void OnНомер_апартаментовChanging(System.Nullable<int> value);
    partial void OnНомер_апартаментовChanged();
    partial void OnНомер_сотрудникаChanging(System.Nullable<int> value);
    partial void OnНомер_сотрудникаChanged();
    #endregion
		
		public Сделка()
		{
			this._Апартаменты = default(EntityRef<Апартаменты>);
			this._Покупатель = default(EntityRef<Покупатель>);
			this._Сотрудники = default(EntityRef<Сотрудники>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер покупателя]", Storage="_Номер_покупателя", DbType="Int")]
		public System.Nullable<int> Номер_покупателя
		{
			get
			{
				return this._Номер_покупателя;
			}
			set
			{
				if ((this._Номер_покупателя != value))
				{
					this.OnНомер_покупателяChanging(value);
					this.SendPropertyChanging();
					this._Номер_покупателя = value;
					this.SendPropertyChanged("Номер_покупателя");
					this.OnНомер_покупателяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер апартаментов]", Storage="_Номер_апартаментов", DbType="Int")]
		public System.Nullable<int> Номер_апартаментов
		{
			get
			{
				return this._Номер_апартаментов;
			}
			set
			{
				if ((this._Номер_апартаментов != value))
				{
					this.OnНомер_апартаментовChanging(value);
					this.SendPropertyChanging();
					this._Номер_апартаментов = value;
					this.SendPropertyChanged("Номер_апартаментов");
					this.OnНомер_апартаментовChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер сотрудника]", Storage="_Номер_сотрудника", DbType="Int")]
		public System.Nullable<int> Номер_сотрудника
		{
			get
			{
				return this._Номер_сотрудника;
			}
			set
			{
				if ((this._Номер_сотрудника != value))
				{
					this.OnНомер_сотрудникаChanging(value);
					this.SendPropertyChanging();
					this._Номер_сотрудника = value;
					this.SendPropertyChanged("Номер_сотрудника");
					this.OnНомер_сотрудникаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Апартаменты_Сделка", Storage="_Апартаменты", ThisKey="Номер_апартаментов", OtherKey="ID", IsForeignKey=true)]
		public Апартаменты Апартаменты
		{
			get
			{
				return this._Апартаменты.Entity;
			}
			set
			{
				Апартаменты previousValue = this._Апартаменты.Entity;
				if (((previousValue != value) 
							|| (this._Апартаменты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Апартаменты.Entity = null;
						previousValue.Сделка.Remove(this);
					}
					this._Апартаменты.Entity = value;
					if ((value != null))
					{
						value.Сделка.Add(this);
						this._Номер_апартаментов = value.ID;
					}
					else
					{
						this._Номер_апартаментов = default(Nullable<int>);
					}
					this.SendPropertyChanged("Апартаменты");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Покупатель_Сделка", Storage="_Покупатель", ThisKey="Номер_покупателя", OtherKey="ID", IsForeignKey=true)]
		public Покупатель Покупатель
		{
			get
			{
				return this._Покупатель.Entity;
			}
			set
			{
				Покупатель previousValue = this._Покупатель.Entity;
				if (((previousValue != value) 
							|| (this._Покупатель.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Покупатель.Entity = null;
						previousValue.Сделка.Remove(this);
					}
					this._Покупатель.Entity = value;
					if ((value != null))
					{
						value.Сделка.Add(this);
						this._Номер_покупателя = value.ID;
					}
					else
					{
						this._Номер_покупателя = default(Nullable<int>);
					}
					this.SendPropertyChanged("Покупатель");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Сделка", Storage="_Сотрудники", ThisKey="Номер_сотрудника", OtherKey="ID", IsForeignKey=true)]
		public Сотрудники Сотрудники
		{
			get
			{
				return this._Сотрудники.Entity;
			}
			set
			{
				Сотрудники previousValue = this._Сотрудники.Entity;
				if (((previousValue != value) 
							|| (this._Сотрудники.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Сотрудники.Entity = null;
						previousValue.Сделка.Remove(this);
					}
					this._Сотрудники.Entity = value;
					if ((value != null))
					{
						value.Сделка.Add(this);
						this._Номер_сотрудника = value.ID;
					}
					else
					{
						this._Номер_сотрудника = default(Nullable<int>);
					}
					this.SendPropertyChanged("Сотрудники");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип апартаментов]")]
	public partial class Тип_апартаментов : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Название;
		
		private EntitySet<Апартаменты> _Апартаменты;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public Тип_апартаментов()
		{
			this._Апартаменты = new EntitySet<Апартаменты>(new Action<Апартаменты>(this.attach_Апартаменты), new Action<Апартаменты>(this.detach_Апартаменты));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(255)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_апартаментов_Апартаменты", Storage="_Апартаменты", ThisKey="ID", OtherKey="Тип_апартаментов")]
		public EntitySet<Апартаменты> Апартаменты
		{
			get
			{
				return this._Апартаменты;
			}
			set
			{
				this._Апартаменты.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Апартаменты(Апартаменты entity)
		{
			this.SendPropertyChanging();
			entity.Тип_апартаментов1 = this;
		}
		
		private void detach_Апартаменты(Апартаменты entity)
		{
			this.SendPropertyChanging();
			entity.Тип_апартаментов1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Покупатель")]
	public partial class Покупатель : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Имя;
		
		private string _Фамилия;
		
		private string _Отчество;
		
		private string _Паспорт;
		
		private string _Телефон;
		
		private string _Почта;
		
		private bool _Карты_Привилегия;
		
		private string _Логин;
		
		private string _Хеш_пароля;
		
		private EntitySet<Корзина> _Корзина;
		
		private EntitySet<Сделка> _Сделка;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnИмяChanging(string value);
    partial void OnИмяChanged();
    partial void OnФамилияChanging(string value);
    partial void OnФамилияChanged();
    partial void OnОтчествоChanging(string value);
    partial void OnОтчествоChanged();
    partial void OnПаспортChanging(string value);
    partial void OnПаспортChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnПочтаChanging(string value);
    partial void OnПочтаChanged();
    partial void OnКарты_ПривилегияChanging(bool value);
    partial void OnКарты_ПривилегияChanged();
    partial void OnЛогинChanging(string value);
    partial void OnЛогинChanged();
    partial void OnХеш_пароляChanging(string value);
    partial void OnХеш_пароляChanged();
    #endregion
		
		public Покупатель()
		{
			this._Корзина = new EntitySet<Корзина>(new Action<Корзина>(this.attach_Корзина), new Action<Корзина>(this.detach_Корзина));
			this._Сделка = new EntitySet<Сделка>(new Action<Сделка>(this.attach_Сделка), new Action<Сделка>(this.detach_Сделка));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NVarChar(255)")]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this.OnИмяChanging(value);
					this.SendPropertyChanging();
					this._Имя = value;
					this.SendPropertyChanged("Имя");
					this.OnИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NVarChar(255)")]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this.OnФамилияChanging(value);
					this.SendPropertyChanging();
					this._Фамилия = value;
					this.SendPropertyChanged("Фамилия");
					this.OnФамилияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отчество", DbType="NVarChar(255)")]
		public string Отчество
		{
			get
			{
				return this._Отчество;
			}
			set
			{
				if ((this._Отчество != value))
				{
					this.OnОтчествоChanging(value);
					this.SendPropertyChanging();
					this._Отчество = value;
					this.SendPropertyChanged("Отчество");
					this.OnОтчествоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Паспорт", DbType="NVarChar(255)")]
		public string Паспорт
		{
			get
			{
				return this._Паспорт;
			}
			set
			{
				if ((this._Паспорт != value))
				{
					this.OnПаспортChanging(value);
					this.SendPropertyChanging();
					this._Паспорт = value;
					this.SendPropertyChanged("Паспорт");
					this.OnПаспортChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="NVarChar(255)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Почта", DbType="NVarChar(255)")]
		public string Почта
		{
			get
			{
				return this._Почта;
			}
			set
			{
				if ((this._Почта != value))
				{
					this.OnПочтаChanging(value);
					this.SendPropertyChanging();
					this._Почта = value;
					this.SendPropertyChanged("Почта");
					this.OnПочтаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Карты Привилегия]", Storage="_Карты_Привилегия", DbType="Bit NOT NULL")]
		public bool Карты_Привилегия
		{
			get
			{
				return this._Карты_Привилегия;
			}
			set
			{
				if ((this._Карты_Привилегия != value))
				{
					this.OnКарты_ПривилегияChanging(value);
					this.SendPropertyChanging();
					this._Карты_Привилегия = value;
					this.SendPropertyChanged("Карты_Привилегия");
					this.OnКарты_ПривилегияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Логин", DbType="NVarChar(50)")]
		public string Логин
		{
			get
			{
				return this._Логин;
			}
			set
			{
				if ((this._Логин != value))
				{
					this.OnЛогинChanging(value);
					this.SendPropertyChanging();
					this._Логин = value;
					this.SendPropertyChanged("Логин");
					this.OnЛогинChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Хеш_пароля", DbType="NVarChar(50)")]
		public string Хеш_пароля
		{
			get
			{
				return this._Хеш_пароля;
			}
			set
			{
				if ((this._Хеш_пароля != value))
				{
					this.OnХеш_пароляChanging(value);
					this.SendPropertyChanging();
					this._Хеш_пароля = value;
					this.SendPropertyChanged("Хеш_пароля");
					this.OnХеш_пароляChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Покупатель_Корзина", Storage="_Корзина", ThisKey="ID", OtherKey="Код_покупателя")]
		public EntitySet<Корзина> Корзина
		{
			get
			{
				return this._Корзина;
			}
			set
			{
				this._Корзина.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Покупатель_Сделка", Storage="_Сделка", ThisKey="ID", OtherKey="Номер_покупателя")]
		public EntitySet<Сделка> Сделка
		{
			get
			{
				return this._Сделка;
			}
			set
			{
				this._Сделка.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Корзина(Корзина entity)
		{
			this.SendPropertyChanging();
			entity.Покупатель = this;
		}
		
		private void detach_Корзина(Корзина entity)
		{
			this.SendPropertyChanging();
			entity.Покупатель = null;
		}
		
		private void attach_Сделка(Сделка entity)
		{
			this.SendPropertyChanging();
			entity.Покупатель = this;
		}
		
		private void detach_Сделка(Сделка entity)
		{
			this.SendPropertyChanging();
			entity.Покупатель = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Сотрудники")]
	public partial class Сотрудники : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Имя;
		
		private string _Фамилия;
		
		private string _Должность;
		
		private System.Nullable<int> _Пароль;
		
		private string _Логин;
		
		private string _Хеш_пароля;
		
		private EntitySet<Сделка> _Сделка;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnИмяChanging(string value);
    partial void OnИмяChanged();
    partial void OnФамилияChanging(string value);
    partial void OnФамилияChanged();
    partial void OnДолжностьChanging(string value);
    partial void OnДолжностьChanged();
    partial void OnПарольChanging(System.Nullable<int> value);
    partial void OnПарольChanged();
    partial void OnЛогинChanging(string value);
    partial void OnЛогинChanged();
    partial void OnХеш_пароляChanging(string value);
    partial void OnХеш_пароляChanged();
    #endregion
		
		public Сотрудники()
		{
			this._Сделка = new EntitySet<Сделка>(new Action<Сделка>(this.attach_Сделка), new Action<Сделка>(this.detach_Сделка));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NVarChar(255)")]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this.OnИмяChanging(value);
					this.SendPropertyChanging();
					this._Имя = value;
					this.SendPropertyChanged("Имя");
					this.OnИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NVarChar(255)")]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this.OnФамилияChanging(value);
					this.SendPropertyChanging();
					this._Фамилия = value;
					this.SendPropertyChanged("Фамилия");
					this.OnФамилияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность", DbType="NVarChar(255)")]
		public string Должность
		{
			get
			{
				return this._Должность;
			}
			set
			{
				if ((this._Должность != value))
				{
					this.OnДолжностьChanging(value);
					this.SendPropertyChanging();
					this._Должность = value;
					this.SendPropertyChanged("Должность");
					this.OnДолжностьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Пароль", DbType="Int")]
		public System.Nullable<int> Пароль
		{
			get
			{
				return this._Пароль;
			}
			set
			{
				if ((this._Пароль != value))
				{
					this.OnПарольChanging(value);
					this.SendPropertyChanging();
					this._Пароль = value;
					this.SendPropertyChanged("Пароль");
					this.OnПарольChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Логин", DbType="NVarChar(50)")]
		public string Логин
		{
			get
			{
				return this._Логин;
			}
			set
			{
				if ((this._Логин != value))
				{
					this.OnЛогинChanging(value);
					this.SendPropertyChanging();
					this._Логин = value;
					this.SendPropertyChanged("Логин");
					this.OnЛогинChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Хеш_пароля", DbType="NVarChar(50)")]
		public string Хеш_пароля
		{
			get
			{
				return this._Хеш_пароля;
			}
			set
			{
				if ((this._Хеш_пароля != value))
				{
					this.OnХеш_пароляChanging(value);
					this.SendPropertyChanging();
					this._Хеш_пароля = value;
					this.SendPropertyChanged("Хеш_пароля");
					this.OnХеш_пароляChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Сделка", Storage="_Сделка", ThisKey="ID", OtherKey="Номер_сотрудника")]
		public EntitySet<Сделка> Сделка
		{
			get
			{
				return this._Сделка;
			}
			set
			{
				this._Сделка.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Сделка(Сделка entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = this;
		}
		
		private void detach_Сделка(Сделка entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = null;
		}
	}
}
#pragma warning restore 1591
